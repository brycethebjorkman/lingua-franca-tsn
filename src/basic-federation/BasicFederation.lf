/**
 * Based on the [DistributedCount test](https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/federated/DistributedCount.lf) from the Lingua Franca codebase
 */

target C

reactor Count {
    output out: int
    state c: int = 0
    timer t(0, 1 sec)
    reaction(t) -> out {=
        lf_set(out, self->c++);
        lf_print("Set out: %d at (%lld, %d)", out->value, lf_time_logical_elapsed(), lf_tag().microstep);
    =}
}

reactor Print {
    input in: int
    reaction(in) {=
        lf_print("Received: %d at (%lld, %d)", in->value, lf_time_logical_elapsed(), lf_tag().microstep);
    =}
}

federated reactor BasicFederation {
    state cout: int = 0
    c = new Count()
    p = new Print()
    c.out -> p.in
    reaction(c.out) {=
        instant_t elapsed_logical_time = lf_time_logical_elapsed();
        printf("c.out -> p.in processed at: %lld nsec with value %d. \n", elapsed_logical_time, c.out->value);
    =}
}
